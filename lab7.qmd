---
title: "Monarch Watch"
author: "Schwab"
format: html
editor: visual
---

```{r}
#install.packages("googlesheets4")
library(googlesheets4)
library(tidyverse)
library(janitor)
library(tidygeocoder)
library(sf)
library(leaflet)
```

Every year Monarch Butterflies fly south for the winter. They start in higher latitudes and migrate south to their wintering areas in Mexico.

[Monarch Watch](https://monarchwatch.org/blog/) is a citizen science initiative housed in the University of Kansas. Every year volunteers tag these butterflies and release them so their progress in their southern migration can be mapped. If someone finds a monarch with a tag they [can report it.](https://docs.google.com/forms/d/e/1FAIpQLSetTI4HYcyb1GfIyo-U5rAuVVezvOrwicz2ztIt244Vh7S4VA/viewform) We'll examine only the Eastern Monarch's trip south.

The reporting data is available online in the form of google sheets. It can be brought into R with the `googlesheets4` R package. Pay attention to your console, google needs permission to download.

## Import and Clean Data

The reporting data is available online in the form of google sheets. It can be brought into R with the `googlesheets4` R package. Pay attention to your console, google needs permission to download.

```{r}
#install.packages("googlesheets4")

# US and Canada Data
US_CAN_Recovery_2022 <- read_sheet("https://docs.google.com/spreadsheets/d/14ONbP-0rgvVz-DR0MWYkkPm0BzyFBHMiNCA2F5I8Yks/edit#gid=1710298744")

# Mexico Recovery Data
Pre_2023_Mexico_Recovery <- read_sheet("https://docs.google.com/spreadsheets/d/1UdJfooBJrm0Y1zlpwIhGz7ToZfP9h8OeucJbXrWwZEY/edit#gid=1853245517")

# If you cannot get acces to the above data run these two lines in the console. Otherwise ignore this message
# googlesheets4::gs4_deauth()
# googlesheets4::gs4_auth()

# The code below takes both of these dataframes and makes them into a list. 

data_frame_list <- list(US_CAN_Recovery_2022, Pre_2023_Mexico_Recovery)
```

There is an R object called a list. A list can store different types of objects like data frames, vectors, character values, etc.

List can be handy for storing and retrieving data. We will make a list called `butterfly_dataframes` and use it to do some data analysis.

```{r}
# We need to clean the data we downloaded from google sheets. We can use clean_names() to do this. Since there are two dataframes we can clean them both at once. Use map() to do so. 

# Iterate over your function to clean the names and store the three dataframes as a list. 
butterfly_dataframes <- map(
  .x = #add the name of the list here,
  .f = #add the name of the function here. 
)

# At the moment butterfly_dataframes is unnamed which is inconvient so below I'm naming all the dataframes in the list.  

names(butterfly_dataframes) <-   c( "US_CAN_Recovery_2022", "Pre_2023_Mexico_Recovery")
```

Now work with the list `butterfly_dataframes`. To access the element in the list you want use the \$.

```{r}
# glimpse just one of the dataframes with $

view(butterfly_dataframes$US_CAN_Recovery_2022)
```

I'd like to trace the paths of these butterflies on a map of the US. Each butterfly has a tag. So if the same tag is repeated multiple times we can follow its path.

Wrangle US_CAN_Recovery to get the top 7 most spotted butterflies 2022. The use pull() to save the most spotted tag codes as a vector so we can use it to filter later.

```{r}
top_7_most_spotted_2022 <- butterfly_dataframes$US_CAN_Recovery_2022  |>
  count(#what do you want to count) |>
  arrange(#) |>
  slice_head(#what arguement goes here?) |>
  pull(tag_code)
  

```

To map the butterfly sightings we need the location data for the top 7 butterflies. `filter()` for the top seven most seen butteflies, pipe that into `select()` to get the location of the city and state and finally pipe that information into `geocode()`. It takes `geocode()` sometime to produce lat and long data. Make sure your filtering works as expected before using `geocode()`. This will give us the lat and long on the city level.

```{r}
top_7_butterfly <- butterfly_dataframes$US_CAN_Recovery_2022 |>
# wrangle here. 
```

```{r}
# I made the US state map for you.

USA_map <-  maps::map("state", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c("x", "y"), crs = 4326)

```

Plot the map to make sure the lower 48 states are shown. Examine USA_map and become familiar with it.

```{r}
# Map out USA_map here. 
```

In the code chunk below add your top 7 butterflies, be sure to jitter them and make them orange.

```{r}
# Make your top 7 butterfly map here. 
```

This is not an exciting map, I only see 7ish dots, not seven butterflies travelling south. This shows the limits of citizen science. Not many people participate so the data is spotty.

## Make a Chrolopleth map of the US and Canada.

Let's see what we can learn when we plot all of the butterflies from 2022 at the same time. Let's code it by the state level, as opposed to the city level to save time. Getting location at the state level will take `geocode()` 43 seconds instead of 8 minutes at the city level. Once you geocode your data you can use save() to save the data, and load() to load it back in when you render. You should comment out the geocoding and save function afterward, uncomment the load().

```{r}
 butterfly_location_data <- butterfly_dataframes$US_CAN_Recovery_2022 |>
   select(tag_code,city_location,state_province,country, date)|>
   geocode(state = state_province, country = country)

save(butterfly_location_data, file = "butterfly_location_data_city.Rdata")
# 
#load("butterfly_location_data_city.Rdata")

```

We would expect locations in the US with more people to have more sightings. So instead of plotting the overall sightings we'll make a Chloropleth map that colors the sightings by state as a percentage of the total sightings.

We have to wrangle the data a bit. Make a df called `butterfly_location_summary` wrangle to find the following:

-   The total number of sightings per state
-   The total number of sightings in 2022
-   The proportion for each state

Then we need to join our data frame with `USA_map` to get the location data. I made a `states` df that has the states names and abbreviations in it to help with joining.

-   join the states df to the butter_location_summary

-   join the new df made above to USA_map, be sure to have US map on the left so you don't lose simple features.

```{r}
# Wrangle your data
butterfly_location_summary <- butterfly_location_data |>
   group_by(state_province) |>
   summarise(
          total = nrow(x=butterfly_location_data),
          #total sighting per state here
          # total proportions)


# Here is a df with state abreviation and names
states<- as.data.frame(cbind(abrev = state.abb, lower_state = tolower(state.name), upper_state = state.name))

#First join

#Second join  Inner join to get the location data. Call the resulting dataframe USA_map_joined.
USA_map_joined <-

```

Great! Let's make our map. Also pick the "YlOrRd" color palette, the default one doesn't conjure up images of Monarchs. Make sure darker means more.  I added some themes to make things nicer

```{r}

# Make map here.

  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  
  
  # I added the following themes you can change them or leave them the same.
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank())
  

```

The above map doesn't normalize for the population of each state. Notice that Texas, NY, NJ,Virginia, and Ohio are darker because more people live there. So they are more likely to see butterflies. To illustrate this run the chunk below of the total number of observations to see that the map is the same.

```{r}
USA_map_joined|>
  ggplot()+
  geom_sf(aes(fill=count_of_sightings)) +
  
  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  scale_fill_distiller(palette = "YlOrRd", direction = 1) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank())
  
```

I'd like a map that shows the proportion of sightings based on the population of each state. Use `get_acs()` from tidycensus to get the state population for the states (choose geography ="state"). Then join with the USA_map_joined to make a normalized proportion by state population.

Give the map below a descriptive title and a caption stating where the data came from remove the latitude and longitude by setting axis.text = element_blank() in theme (see notes from previous classes).

```{r}
# I'm bringing in the population bby state data for you. 

US_pop <- 
  tidycensus::get_acs(
    # arguements here, you want all states, not just Mass like we did in class. 
  ) |>
  mutate(NAME = tolower(NAME))

# Join the population data with USA_map_joined Call the resulting dataframe US_tot_pop

US_tot_pop <- inner_join()|>
  
  #make a coloumn that has a proportion for the sighting by population. 
 

# Make your new map here. 

  
  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    # remove the lat and long with the appropriate arguement.
    )
  
```

**Question: What does the above map show?**


## An Interactive Map

We'll use leaflet to make a map showing the location of all of the sightings in 2022.

These butterflys end up in Mexico for the winter. Using Pre_2023_Mexico_Recovery data

-   filter for 2022 data

-   add a column that is called Mexico and is the word "Mexico" repeated.

-   add a column that is the count of the number of sightings in each location.

-   Then geocode by state and country.

```{r}
Mexico_locations <- butterfly_dataframes$Pre_2023_Mexico_Recovery |>
  filter(#)|>
  group_by()|>
  mutate() |>
    # We need to ungroup our data before we geocode it. 
  ungroup()|>
  geocode(state = , country = )



```

I ran the location by city, and it took 8 minutes. You should be able to load in the data. I've left my code for geocoding, just so you can see it. You don't need it. 

```{r}
#If you choose to do this I recommend you save the data then load it as necessary. After saving the data comment the code below. If you want to use the geocoding my state, that's fine too. 

# butterfly_location_data_8min <- butterfly_dataframes$US_CAN_Recovery_2022 |>
#    select(tag_code,city_location,state_province,country, date)|>
#    geocode(city = city_location, state = state_province, country = country)

#save(butterfly_location_data_8min, file = "butterfly_location_data_8min.Rdata")

# Make sure butterfly_location_data_8min shows in the environment after loading.  
load("butterfly_location_data_8min.Rdata")
```

Make a map of mexico.

```{r}
Mexico_map <-  maps::map(region = "Mexico", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c("x", "y"), crs = 4326)

```

This bit of code will bring in the image of a butterfly, so we can make our map pretty. You can see this file in your files. 

```{r}
butterfly_icon <- makeIcon(
  iconUrl = "monarch-butterfly.png",
  iconWidth = 9.6, iconHeight = 9.6,
  iconAnchorX = 0, iconAnchorY = 0)
```

Add two sets for markers one for the individual sightings in `butterfly_location_data` and one for the Mexico locations, use the big icons for the wintering homes. Figure out which arguments need to go into the addMarkers() functions. 

```{r leaflet}
leaflet() |>
  addTiles() |>
  addMarkers(data= , 
             lat = ~#what variable goes here, leave the ~,
             lng = ~#what variable goes here, leave the ~,
             icon = 
             )|>
  
  # Add a popup with the number of butterflies counted for mexico. 
  addCircleMarkers(data = Mexico_locations,
                   popup = ~as.character(#what goes here?))
    
  
```

This map gives an interesting picture of where this type of citizen science is actually happening. We'll play with leaflet more on Monday.
